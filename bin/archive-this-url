#!/usr/bin/env perl
use v5.18;

use FindBin;
use lib "$FindBin::Bin/../lib";

use Diversion::BlobStore;

use DBI;
use HTTP::Tiny;
use JSON;
use IO::All;

my @feeds;
my $feed_url = shift or die "Missing URL in arg";
if (-f $feed_url) {
    @feeds = grep { s/\s//g; $_ } io($feed_url)->chomp->getlines;
} else {
    push @feeds, $feed_url;
}

my $dbh = DBI->connect(
    "dbi:SQLite:dbname=$ENV{HOME}/var/Diversion/url_archive/index.sqlite3",
    undef,
    undef,
    { AutoCommit => 1 }
);

my $blob_store = Diversion::BlobStore->new(
    root => "$ENV{HOME}/var/Diversion/blob_store/"
);

my $JSON = JSON->new->canonical->pretty;

my $sth_insert = $dbh->prepare(q{ INSERT INTO uri_archive(uri, created_at, content_sha1_digest, header_sha1_digest) VALUES (?,?,?,?)});
my $sth_check = $dbh->prepare(q{ SELECT 1 FROM uri_archive WHERE uri = ? AND content_sha1_digest = ? LIMIT 1});

my $http = HTTP::Tiny->new( timeout => 6 );
for my $url (@feeds) {
    my $response = $http->get($url);
    if ( $response->{status} eq '200' ) {
        my $header_dump_json = $JSON->encode($response->{headers});
        my $header_digest = $blob_store->put($header_dump_json);
        my $content_digest = $blob_store->put($response->{content});

        $sth_check->execute($url, $content_digest);
        if ($sth_check->fetchrow_array) {
            say "OLD $url";
        } else {
            $sth_insert->execute($url, 0+time, $content_digest, $header_digest);
            say "NEW $url";
        }
    } else {
        say "ERROR: $response->{status}";
    }
}
